import pygraphviz as pgv

g=pgv.AGraph(directed=True, rankdir='TD', compound=True)

g.add_node("self.z")
g.add_node("self.realData")
g.add_node("self.batchData")

#tmp = g
c = g.add_subgraph(name='cluster_sample',label = 'Sampler', shape='box',labeljust='l', penwidth="3pt",color='#7c7c7c')
c.add_node("v")
c.add_node("NiceNetworkOperator0,ifMH = False",shape='box')
g.add_edge("self.z","NiceNetworkOperator0,ifMH = False")
c.add_edge("v","NiceNetworkOperator0,ifMH = False")
c.add_node("self.v_")
c.add_node("self.z_")
c.add_edge("NiceNetworkOperator0,ifMH = False","self.v_")
c.add_edge("NiceNetworkOperator0,ifMH = False","self.z_")
#g = tmp

c = g.add_subgraph(name='cluster_generator',label = 'Generator', shape='box',labeljust='l', penwidth="3pt",color='#7c7c7c')
cc = c.add_subgraph(name='cluster_1',label = '1st NICE Operator', shape='box',labeljust='l', penwidth="3pt",color='#7c7c7c')
cc.add_node("v_")
cc.add_node("NiceNetworkOperator1,ifMH = True",shape='box')
cc.add_node("z1")
cc.add_node("v1")
g.add_edge("self.z","NiceNetworkOperator1,ifMH = True")
cc.add_edge("v_","NiceNetworkOperator1,ifMH = True")
cc.add_edge("NiceNetworkOperator1,ifMH = True","z1")
cc.add_edge("NiceNetworkOperator1,ifMH = True","v1")


cc = c.add_subgraph(name='cluster_2',label = '2nd NICE Operator', shape='box',labeljust='l', penwidth="3pt",color='#7c7c7c')
cc.add_node("v1_")
cc.add_node("NiceNetworkOperator2,ifMH = True",shape='box')
g.add_edge("self.realData","NiceNetworkOperator2,ifMH = True")#,label="abc")
cc.add_edge("v1_","NiceNetworkOperator2,ifMH = True")
cc.add_edge("NiceNetworkOperator2,ifMH = True","z2")
cc.add_edge("NiceNetworkOperator2,ifMH = True","v2")

cc = c.add_subgraph(name='cluster_3',label = '3rd NICE Operator', shape='box',labeljust='l', penwidth="3pt",color='#7c7c7c')
c.add_node("tf.stop_gradient",shape='box')
c.add_edge("z1","tf.stop_gradient")
cc.add_node("z1_")
c.add_edge("tf.stop_gradient","z1_")

cc.add_node("v2_")
cc.add_node("NiceNetworkOperator3,ifMH = True",shape='box')
cc.add_edge("v2_","NiceNetworkOperator3,ifMH = True")
cc.add_edge("z1_","NiceNetworkOperator3,ifMH = True")
cc.add_edge("NiceNetworkOperator3,ifMH = True","z3")
cc.add_edge("NiceNetworkOperator3,ifMH = True","v3")

c.add_node(41,label = "tf.concat",shape='box')
c.add_node("zConcated")
#g.add_edge("self.realData","tf.concat")
c.add_edge("z1",41)
c.add_edge("z2",41)
c.add_edge("z3",41)
c.add_edge(41,"zConcated")

c.add_node(42,label = "tf.concat",shape='box')
c.add_node("vConcated")
c.add_edge("v1",42)
c.add_edge("v2",42)
c.add_edge("v3",42)
c.add_edge(42,"vConcated")

c.add_node("GVar")
c.add_edge("GVar","NiceNetworkOperator0,ifMH = False")
c.add_edge("GVar","NiceNetworkOperator1,ifMH = True")
c.add_edge("GVar","NiceNetworkOperator2,ifMH = True")
c.add_edge("GVar","NiceNetworkOperator3,ifMH = True")

c = g.add_subgraph(name='cluster_trainD',label = 'Trainer', shape='box',labeljust='l', penwidth="3pt",color='#7c7c7c')
c.add_node("DVar")
c.add_edge("DVar","self.discriminator0")
c.add_edge("DVar","self.discriminator1")

c.add_node("rD")
c.add_node("fD")
c.add_node("self.discriminator0",shape='box')
c.add_node("self.discriminator1",shape='box')
c.add_edge("realData","self.discriminator0")
c.add_edge("zConcated","self.discriminator1")
c.add_edge("self.discriminator0","rD")
c.add_edge("self.discriminator1","fD")

c.add_node("realData")
c.add_node(43,label = "tf.reshape",shape='box')
g.add_edge("self.realData",43)
c.add_edge(43,"realData")

cc = c.add_subgraph(name='cluster_gp',label = 'Gradients penalty', shape='box',labeljust='l', penwidth="3pt",color='#7c7c7c')
cc.add_node("batchData")
cc.add_node(44,label = "tf.reshape",shape='box')
g.add_edge("self.batchData",44)
cc.add_edge(44,"batchData")

cc.add_node("epsilon")
cc.add_node("-",shape='box')
cc.add_node("1")
cc.add_edge("1","-")
cc.add_edge("epsilon","-")
cc.add_node("*",shape='box')
cc.add_edge("-","*")
g.add_edge("zConcated","*")
cc.add_node("+",shape='box')
cc.add_edge("*","+")
cc.add_node(4,label = "*",shape='box')
cc.add_edge("epsilon",4)
g.add_edge("batchData",4)
cc.add_edge(4,"+")
cc.add_node("hat")
cc.add_edge("+","hat")
cc.add_node("self.discriminator2",shape='box')
g.add_edge("DVar","self.discriminator2")
cc.add_edge("hat","self.discriminator2")
cc.add_node("hatD")
cc.add_edge("self.discriminator2","hatD")
cc.add_node("tf.gradients",shape='box')
cc.add_edge("hat","tf.gradients")
cc.add_edge("hatD","tf.gradients")
cc.add_node("tf.norm,axis=1",shape='box')
cc.add_edge("tf.gradients","tf.norm,axis=1")
cc.add_node("scale")
cc.add_node(3,label = "*",shape='box')
cc.add_node("1.0")
cc.add_node(2,label="-",shape='box')
cc.add_edge("1.0",2)
cc.add_edge("tf.norm,axis=1",2)
cc.add_node("tf.square")
cc.add_edge(2,"tf.square")
cc.add_edge("tf.square",3)
cc.add_edge("scale",3)
cc.add_node("tf.reduce_mean",shape='box')
cc.add_edge(3,"tf.reduce_mean")
cc.add_node("gradientHatD",shape='box')
cc.add_edge("tf.reduce_mean","gradientHatD")

c.add_node(11,label = "tf.reduce_mean",shape='box')
c.add_node(12,label = "tf.reduce_mean",shape='box')
c.add_edge("rD",11)
c.add_edge("fD",12)
c.add_node(13,label="-",shape='box')
c.add_edge(11,13)
c.add_edge(12,13)
c.add_node(14,label = "+",shape='box')
c.add_edge("gradientHatD",14)
c.add_edge(13,14)
c.add_node("self.Dloss")
c.add_edge(14,"self.Dloss")

cc = c.add_subgraph(name='cluster_v',label = 'V divergence', shape='box',labeljust='l', penwidth="3pt",color='#7c7c7c')
c.add_node(21,label="+",shape='box')
c.add_edge(12,21)
cc.add_node(22,label="tf.reduce_mean",shape='box')
cc.add_node("0.5")
cc.add_node(23,label="*",shape='box')
cc.add_edge("0.5",23)
cc.add_node(24,label = "tf.square",shape='box')
cc.add_edge("vConcated",24)
cc.add_edge(24,23)
cc.add_edge(23,22)
cc.add_node("eta")
cc.add_node(25,label = "*",shape='box')
cc.add_edge("eta",25)
c.add_edge(22,25)
c.add_edge(25,21)
c.add_node("self.Gloss")
c.add_edge(21,"self.Gloss")

c.add_edge("self.Gloss",31)
c.add_edge("self.Dloss",32)
c.add_node(31,label="tf.train.AdamOptimizer.minimize",shape='box')
c.add_node(32,label="tf.train.AdamOptimizer.minimize",shape='box')
c.add_node("self.trainG")
c.add_node("self.trainD")
c.add_edge(31,"self.trainG")
c.add_edge(32,"self.trainD")

g.layout('dot')
g.draw('file.png')